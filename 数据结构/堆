1.什么是堆❓
    一种特殊的树

2.堆需要满足什么条件❓ 
    1.完全二叉树
    2.大顶堆/小顶堆

3.堆排性能为何不如快排❓
    堆排序数据交换要多于快排

4.堆的应用👇
    1.优先级队列：在优先级队列中，数据的出队操作不是先进先出，而是按照优先级来，优先级最高的就先出队，不难联想到堆这种数据结构,大顶堆最大的元素在堆顶
        👉应用场景1：合并小文件
        👉应用场景2：高性能定时器
    2.利用堆求Top K
        比如十万个数据要取前1000条数据,那我可以建立并维护一个有1000条数据的小顶堆，然后顺序遍历数组，如果元素比堆顶元素大则删除堆顶元素，并插入到堆中。
        等数组遍历完以后，堆中的数据就是最终的TOP1000条.  NICE! NICE! (之前没想到这种方法)
        复杂度分析：遍历数组O(n) 一次堆化为O(logn) ,最坏情况下n个数据都要入堆. 那时间复杂度就是O(nlogK);
    3.求中位数
        分别维护一个大顶堆和一个小顶堆，小顶堆中的数据都比大顶堆中的大, 这样大顶堆中的堆顶元素就是中位数.

5.结论：插入堆顶数据和往堆中插入数据的时间复杂度都是O(logn)


6.最全面思考题：
    😚：10亿条搜索数据获取搜索次数最多的TOP10数据。
    1.采用散列表，如果数据在散列表中，那对应value值+1，不在的话，插入到散列表中.
    2.维护一个数据为10的小顶堆. 遍历散列表，如果当前值比堆顶数据大的话，删除堆顶元素，插入该条数据，再进行一次堆化。
    3.考虑到存储空间可能有限在以上的基础上再进行一次优化，使用哈希算法.因为相同的值经过哈希算法映射以后得到的值是相同的，可以基于哈希算法把10亿条数据分到10个文件中，那经过哈希算法映射之后每个文件中的都没有重复的数据
    会节省大量的空间.针对1亿条搜索关键词的文件，分别利用散列表和堆，求出TOP10  然后把这10个TOP10放在一块，然后在这100个关键词中，出现次数最多的10个就是最终要得到的数据.