1.什么是Trie树❓
    Trie树是一个多叉树.

2.Trie树的本质是什么❓
    利用公共前缀,把重复的字符串前缀合并在一起。

2.Trie树适用于什么场景❓
    一组字符串集合中快速查找某个字符串。
    大数据量的字符串匹配, 比如百度/Google搜索时的提示词功能.

3.Trie树如何构建❓
    遍历字符串数组时, 从根节点向下添加字符串。

4.Trie树如何查找目标元素❓
    比如查找Tom: 1.拆分字符串 'T','o','m' 然后从根节点进行匹配。

5.如何存储Trie树❓
    数组顺序存储/基于链表的链式存储.

6.时间复杂度空间复杂度是多少❓
    有两个主要操作👉1.构造Trie树 O(n)
                 👉2.查询一个字符串. O(k) 注:大约对比k个节点即可完成查询操作

7.总结Trie树的特点：
    高效 但 浪费内存.

8.Trie树存储优化❓
     数组存储：可用散列存储子节点指针.
     链表存储：可用跳表来建立多个索引层.