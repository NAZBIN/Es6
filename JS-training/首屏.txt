渲染流水线影响到了首次页面展示的速度，而首次页面展示的速度
又直接影响用户体验。

so  ->首先分析渲染流水线.

白屏过久通常是因为需要等待关键资源的加载(时间久),对应的之后要生成CSSOM和DOM.

之后是到了页面的绘制阶段。

优化方式:
使用内联css和js.这样获取的HTML文件后就可以直接开始渲染流程了.
    无需等待资源下载.
尽量减少关键资源的体积, 可对其进行压缩和拆分.缩短单次下载的时间
使用sync/defer标记script.
css使用媒体查询对不同用途的css进行拆分.



并非所有的资源都会阻塞页面的首次绘制，比如图片、音频、视频等文件就不会阻塞页面的首次渲染；而 JavaScript、首次请求的 HTML 资源文件、CSS 文件是会阻塞首次渲染的，因为在构建 DOM 的过程中需要 HTML 和 JavaScript 文件，在构造渲染树的过程中需要用到 CSS 文件。


优化策略:加载阶段 交互阶段.
减少关键资源的个数和大小,降低RTT.避免强制同步布局,
避免频繁的垃圾回收，合理利用 CSS 合成动画，避免布局抖动（修改DOM时进行查询）